function varargout = funclibpath(option)
   %FUNCLIBPATH Manage matlab function path.
   %
   %  OLDPATH = FUNCLIBPATH() Returns the value of MATLABFUNCTIONPATH env. var.
   %  OLDPATH = FUNCLIBPATH('rmpath') Removes MATLABFUNCTIONPATH from path.
   %  OLDPATH = FUNCLIBPATH('addpath') Adds MATLABFUNCTIONPATH to path.
   % 
   % See also:

   narginchk(0, 1)
   if nargin < 1
      option = 'which';
   end
   option = validatestring(option, {'rmpath', 'addpath', 'which'}, ...
      mfilename, 'OPTION', 1);

   if strcmp(option, 'which')
      % Return the function library path.
      varargout{1} = getenv('MATLABFUNCTIONPATH');
   else
      % Add or remove the function library path from userpath.
      oldpath = setfunclibpath(option);

      if nargout == 1
         varargout{1} = oldpath;
      end
   end
end

function oldpath = setfunclibpath(option)
   %SETFUNCLIBPATH Add or remove MATLABFUNCTIONPATH to/from path.
   %
   %
   % See also: startup

   % Commented out, isenv not octave compatible
   % if ~isenv('MATLABFUNCTIONPATH')
   %    error('MATLABFUNCTIONPATH is not defined')
   % end

   % Check if this is octave
   inoctave = (exist ('OCTAVE_VERSION', 'builtin') > 0);

   % Save the current state of the warnings
   originalWarningState = warning;

   % Create a cleanup object that will be executed when the function is exited
   cleanupObj = onCleanup(@() warning(originalWarningState));

   % Suppress warnings (e.g., generated by activating mpm)
   warning('off', 'MATFUNCLIB:manager:toolboxAlreadyActive')
   if inoctave
      % Since the rmpath warning cannot be turned off, just turn them all off:
      warning('off')
   else
      warning('off','MATLAB:dispatcher:nameConflict');
      warning('off','MATLAB:rmpath:DirNotFound')
      warning('off','MATLAB:mpath:packageDirectoriesNotAllowedOnPath')
   end

   % return old path
   oldpath = path;

   if strcmp(option, 'rmpath')
      rmpath(genpath(getenv('MATLABUSERPATH')))
      return
   end

   % Generate a list of all sub-folders
   subpaths = strsplit(genpath(getenv('MATLABUSERPATH')), pathsep);

   % Remove ignored folders
   ignorePaths = {'.git'; '.svn'; '.'; '..'; };
   keep = @(folders, ignore) cellfun('isempty', (strfind(folders, ignore)));

   % custom remove for octave compatibility
   if inoctave
      ignorePaths = [ignorePaths; {
         fullfile(getenv('MATLABFUNCTIONPATH'), 'libtext', 'printf'); ...
         fullfile(getenv('MATLABFUNCTIONPATH'), 'liblogic', 'iscomplex'); ...
         fullfile(getenv('MATLABFUNCTIONPATH'), 'liblogic', 'ifelse'); ...
         fullfile(getenv('MATLABFUNCTIONPATH'), 'libstruct', 'numfields'); ...
         fullfile(getenv('FEXFUNCTIONPATH'), 'libarrays', 'foreach'); ...
         }];
   end

   for m = 1:numel(ignorePaths)
      subpaths = subpaths(keep(subpaths, ignorePaths{m}));
   end

   % Rebuild the path string
   subpaths = strcat(subpaths, pathsep);
   subpaths = horzcat(subpaths{:});

   % Add the paths to the path
   addpath(subpaths, '-end');
end
