function varargout = funclibpath(option)
   arguments
      option string ...
         {mustBeMember(option, ["rmpath","addpath","which"])} = "which"
   end
   libpath = getenv('MATLABFUNCTIONPATH');

   if option == "which"
      varargout{1} = libpath;
   else
      % Should I just call startup? Otherwise I need to maintain
      % addfunclibpath in two locations.
      oldpath = setfunclibpath(option);

      if nargout == 1
         varargout{1} = oldpath;
      end
   end
end

function oldpath = setfunclibpath(option)
   %SETFUNCLIBPATH Add or remove MATFUNCLIB to path.
   %
   %
   % See also: startup

   if ~isenv('MATLABFUNCTIONPATH')
      error('MATLABFUNCTIONPATH is not defined')
   end

   % Check if this is octave
   inoctave = (exist ("OCTAVE_VERSION", "builtin") > 0);

   % Save the current state of the warnings
   originalWarningState = warning;

   % Create a cleanup object that will be executed when the function is exited
   cleanupObj = onCleanup(@() warning(originalWarningState));

   % Suppress warnings (e.g., generated by activating mpm)
   warning("off", "MATLAB:dispatcher:nameConflict");
   warning("off", "MATLAB:rmpath:DirNotFound");
   warning("off", "MATFUNCLIB:manager:toolboxAlreadyActive")

   oldpath = path; % return old path

   if option == "rmpath"
      rmpath(genpath(getenv('MATLABUSERPATH')))
      return
   end

   % Generate a list of all sub-folders
   subpaths = strsplit(genpath(getenv('MATLABUSERPATH')), pathsep);

   % Remove ignored folders
   ignorePaths = {'.git'; '.svn'; '.'; '..'; };
   keep = @(folders, ignore) cellfun('isempty', (strfind(folders, ignore)));

   % custom remove for octave compatibility
   if inoctave
      ignorePaths = [ignorePaths; {
         fullfile(getenv('MATLABFUNCTIONPATH'), 'libtext', 'printf'); ...
         fullfile(getenv('MATLABFUNCTIONPATH'), 'liblogic', 'iscomplex'); ...
         fullfile(getenv('MATLABFUNCTIONPATH'), 'liblogic', 'ifelse'); ...
         fullfile(getenv('MATLABFUNCTIONPATH'), 'libstruct', 'numfields'); ...
         fullfile(getenv('FEXFUNCTIONPATH'), 'libarrays', 'foreach'); ...
         }];
   end

   for m = 1:numel(ignorePaths)
      subpaths = subpaths(keep(subpaths, ignorePaths{m}));
   end

   % Rebuild the path string
   subpaths = strcat(subpaths, pathsep);
   subpaths = horzcat(subpaths{:});

   % Add the paths to the path
   addpath(subpaths, '-end');
end
