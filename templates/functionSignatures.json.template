{
   "_schemaVersion": "1.0.0",
   "funcname":
   {
      "inputs":
      [
         {"name":"A",   "kind":"required",   "type":["char"]},
         {"name":"goto","kind":"flag",       "type":["char","choices={'goto'}","scalar"], "default":"'no'","purpose":"Option"},
         {"name":"goto","kind":"ordered",    "type":["char","choices={'goto'}"],"default":"'no'","purpose":"Option"},
         {"name":"B",   "kind":"required",   "type":[["numeric","column"],["datetime","column"]]},
         {"name":"B",   "kind":"namevalue",  "type":["logical","scalar"],"purpose":"Option"}
         {"name":"C",   "kind":"required",   "type":["numeric","vector","double"]},
         {"name":"D",   "kind":"required",   "type":["char","choices={'X','Y'}"]},
         {"name":"E",   "kind":"required",   "type":["numeric","scalar"]},
         {"name":"F",   "kind":"ordered",    "type":["numeric","column","double"]},
         {"name":"G",   "kind":"namevalue",  "type":["logical"]},
         {"name":"ax",  "kind":"namevalue",  "type":["matlab.graphics.axis.Axes"]},
         {"name":"line","kind":"namevalue",  "type":["matlab.graphics.chart.primitive.Line"]},
         {"name":"fig", "kind":"namevalue",  "type":["matlab.ui.Figure"]},
         {"name":"basins",    "kind": "required",
                              "type": ["struct"]},
         {"name":"varname",   "kind": "namevalue",    
                              "type":"choices=fieldnames(basins)"},
      ]
   }
}


% various hard to find resources that document json formatting for matlab
% https://www.mathworks.com/help/mps/restfuljson/matlab-function-signatures-in-json.html
% https://www.mathworks.com/help/mps/restfuljson/matlab-function-signatures-in-json.html#mw_81133643-20fb-43f0-9643-11b1221ff8d0
% https://www.mathworks.com/help/mps/restfuljson/restful-api-for-discovery-and-diagnostics.html#mw_d710d743-384a-434f-b4ab-2b5941e56ca8

% to wrap around built-in matlab functions, if we know the default optional
% input values, we can just mirror those in our input parser. If not, see
% loadgis.m and its call to parser2varargin. Imagine we want a function that
% calls matlab built in function, so we want all the inputs to the built in as
% inputs to our function. We first open the built-in and the function signature
% file, copy it over to our file, but we need the defaults for our parser,
% otherwise we need complicated swithc or if/else statements to get the calling
% syntax to the built in correct. for general calls, we need the defaults. but
% some functiosn don't have documented defaults. parser2varargin figures out
% which ones were passed in to th ewrapper and only passes those to the built
% in. its an edge case but opens up the door to wrapping built ins with much
% simpler syntax within th ewrapper func


% has to be true to use autocomplete fieldname, and probably should be false if
% passing in a struct that you don't want to expand   
p.StructExpand = true;  
see bfra_mapbasins for strucutre input field name autocomplete
see bfra_getevents for multi-function signature
see rasterref for multi-input group signature, or 
cd('/Applications/MATLAB_R2020b.app/toolbox/map/map/resources') 
and open signatures for examples:

"deg2km":
{
	"inputs":
	[
		{"name":"deg", "kind":"required", "type":"numeric"},
		{"mutuallyExclusiveGroup":
			[
				{"name":"sphere", "kind":"ordered", "type":"choices={'earth','mercury','venus','moon','mars','jupiter','saturn','uranus','neptune','pluto','sun'}"},
				{"name":"radius", "kind":"ordered", "type":"numeric"}
			]
		}
	],
	"outputs":
	[
		{"name":"km", "type":"numeric"}
	]
},


NOTES:
type "flag" must be a constant string, normally a switch like 'ascend'
to match ALL types, use e.g.:    "type":["numeric","column"]
to match EITHER types, use e.g.: "type":[["numeric","column"],["datetime","column"]]
brackets are only needed around lists, e.g. "type": "char" is OK but "type": "char","scalar" is not
for logical autocomplete, need: ["logical","scalar"] not just ["logical"]

% the two goto's show that 'flag' or 'ordered' both work, and also that an additional type comes after the first type, wehre the first one has choices
example from '/Applications/MATLAB_R2020b.app/toolbox/matlab/polyfun/':
{"name":"extrapolation", "kind":"positional", "type":[["char", "choices={'extrap'}"],["numeric"]]}

also try this:
doc JSON Representation of MATLAB Data Types
doc MATLAB Function Signatures in JSON

- to use a function to generate choices, see mkfunction, the key was to not put 
{} around the function name

{"name":"category",  "kind":"namevalue",  "type":["char","choices=functiondirectorylist"],"purpose":"Option"}


this is an example wehre the order is required, optional, namevalu, and optional uses choices:
        {"name":"tr", "kind":"required", "type":[["triangulation"], ["delaunayTriangulation"]]},
        {"name":"filename", "kind":"required", "type":[["file=*.stl,*.STL"], ["char"]]},
        {"name":"fileformat", "kind":"optional", "type":["char", "choices={'binary', 'text'}"]},
        {"name":"Attribute", "kind":"namevalue", "type":["numeric", "vector"]},
        {"name":"SolidIndex", "kind":"namevalue", "type":["numeric", "vector"]}

how to add comments, from timetable folder (see mkfunction for an example):
{
"_comment": "****************************************************************************************************************",
"_comment": "DO NOT EDIT THIS FILE.",
"_comment": "The source version of this file is functionSignatures_src.json.",
"_comment": "DO NOT EDIT THIS FILE.",
"_comment": "****************************************************************************************************************",

"_comment": "Copyright 2017-2020 MathWorks, Inc.",



here is how matlab handles 'ax' as first input to plotting functions. 
"repeating" means you can pass the argument multiple times such as: 
plot(X1,Y1,X2,Y2,X3,Y3)
"tuple" means it's a group of repeating arguments, don't think it means it has to be three

"plot":
{
	"inputs":
	[
		{"name":"ax", "kind":"ordered", "type":[["matlab.graphics.axis.AbstractAxes"], ["matlab.ui.control.UIAxes"]]},
		{"mutuallyExclusiveGroup":
			[
				[
					{"name":"Y", "kind":"required", "type":[["numeric"],["datetime"],["duration"],["categorical"]]},
					{"name":"LineSpec", "kind":"ordered", "type":["char", "@matlab.graphics.internal.isLineSpec"]}
				],
				{"repeating":true, "tuple":
					[
						{"name":"X", "type":[["numeric"],["datetime"],["duration"],["categorical"]]},
						{"name":"Y", "type":[["numeric"],["datetime"],["duration"],["categorical"]]},
						{"name":"LineSpec", "kind":"ordered", "type":["char", "@matlab.graphics.internal.isLineSpec"]}
					]
				}
			]
		},
		{"name":"opts", "kind":"properties", "type":"matlab.graphics.chart.primitive.Line"}
	],
	"outputs":
	[
		{"name":"h", "type":"matlab.graphics.chart.primitive.Line"}
	]
},


here is another example might be clearer b/c no mutually exclusive groups
"xlabel":
{
	"inputs":
	[
		{"name":"target", "kind":"ordered", "type":[["matlab.graphics.axis.Axes"], ["matlab.ui.control.UIAxes"], ["matlab.graphics.illustration.ColorBar"], ["matlab.graphics.chart.Chart"]]},
		{"name":"txt", "kind":"required", "type":"char"},
		{"name":"opts", "kind":"properties", "type":"matlab.graphics.primitive.Text"}
	],
	"outputs":
	[
		{"name":"h", "type":"matlab.graphics.primitive.Text"}
	]
},

