% The toolbox folder structure:

% images/      image files toolboxPackaging.jpg and readmeImage.jpg
% release/     .mltbx toolbox file, created when the toolbox is packaged
% resources/   project folder, created when makeproject.m is run
% sandbox/     testbed folder, ignored by .git/info/exclude
% tests/       
%     -> runtests.m  file to run test suite
%     -> test<Func1>.m
%     -> test<Func2>.m ... all other test functions
% toolbox/     main toolbox folder
%     -> Contents.m
%     -> +tbx/    top-level package for toolbox code (replace tbx with desired acronym)
%        -> +internal/    second-level package for standard utilities (eg validationModule.m or parserfunctions.m)
%        -> +deps/   second-level package for toolbox dependencies
%        -> +util/   second-level package for toolbox-specific utilities (+tools?)
%        -> +sym/    second-level package for symbolic-based functions (should be .mlx files)
%        -> private/ - private methods
% -> data - any data needed to run examples (not sure about this)
% -> docs ? 
% -> examples - live scripts and other demo files
% -> internal - non-user facing code, e.g. livetasks
% -> functionSignatures.json
% -> gettingStarted.mlx
% workflow/ ? 
% paper/ ?
% 
% buildfile.m
% makeproject.m
% setup.m
% config.m
% license
% README
% toolboxPackaging.prj


% These are items in baseflow that could or should be migrated into the template

% docs/
% -> html/helptoc.xml
% -> html/custom_toolbox.xml (created by something likely builddocsearchdb)
% convertlivescripts.m

% CITATION.cff
% DESCRIPTION (maybe generated by GitHub)
% info.xml
% makedocs.m
% 
% package.json? (for npm, probably not needed)
% mproject.toml?
% mproject.json?
% setup.cfg?


% Should there be a 












